# -*- coding: utf-8 -*-
"""knnalgo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jXhWC-7JkRhaBPhl1BJOCSyEwL_doHs3
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('/content/breast-cancer.csv')  # Replace with your path if different
df.head()

# Prepare the data
y = df['diagnosis']
#X = df.drop(['id', 'Unnamed: 32', 'diagnosis'], axis=1)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train KNN with different values of k and store accuracies
accuracy_scores = []

for k in range(1, 11):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    accuracy = knn.score(X_test, y_test)
    accuracy_scores.append(accuracy)

# Plotting Accuracy vs. k
sns.set_style("whitegrid")
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), accuracy_scores, marker='o', linestyle='-')
plt.xticks(range(1, 11))
plt.xlabel("Number of Neighbors (k)")
plt.ylabel("Accuracy")
plt.title("KNN Accuracy for Different k Values")
plt.grid(True)
plt.show()

# Find the best k
best_k = accuracy_scores.index(max(accuracy_scores)) + 1
print(f"Best k: {best_k} with accuracy: {max(accuracy_scores)*100:.2f}%")

# Train the best KNN model and display the confusion matrix
best_knn = KNeighborsClassifier(n_neighbors=best_k)
best_knn.fit(X_train, y_train)
y_pred = best_knn.predict(X_test)

cm = confusion_matrix(y_test, y_pred, labels=best_knn.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=best_knn.classes_)
disp.plot()
plt.title(f"Confusion Matrix (k={best_k})")
plt.grid(False)
plt.show()
print(k)